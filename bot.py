import os
import re
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv

load_dotenv()
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()

# --- –ó–∞–≥–ª—É—à–∫–∏ –¥–∞–Ω–Ω—ã—Ö ---
STUB_DATA = {
    "auth_users": {
        "test@example.com": {"password": "123", "balance": 1000, "game_id": "123", "best_score": 0}
    },
    "sessions": {},  # telegram_id: email
    "bets": [
        {"id": 1, "game_id": "123", "amount": 100, "status": "–í—ã–∏–≥—Ä—ã—à"},
        {"id": 2, "game_id": "123", "amount": 50, "status": "–ü—Ä–æ–∏–≥—Ä—ã—à"}
    ],
    "leaderboard": [
        {"username": "Player1", "score": 5000},
        {"username": "Player2", "score": 4000}
    ]
}

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ---
class AuthStates(StatesGroup):
    waiting_for_email = State()
    waiting_for_password = State()

class MenuStates(StatesGroup):
    in_wallet = State()
    in_bets = State()
    waiting_for_bet_amount = State()
    waiting_for_deposit = State()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_main_menu(user_id: int = None):
    buttons = [
        [KeyboardButton(text="üí∞ –ö–æ—à–µ–ª—ë–∫"), KeyboardButton(text="üé≤ –°—Ç–∞–≤–∫–∏")],
        [KeyboardButton(text="üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤"), KeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
    ]
    
    if user_id and user_id in STUB_DATA["sessions"]:
        buttons.append([KeyboardButton(text="üö™ –í—ã–π—Ç–∏")])
    else:
        buttons.append([KeyboardButton(text="üîê –í–æ–π—Ç–∏")])
    
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_wallet_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è"), KeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

def get_bets_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Å—Ç–∞–≤–∫—É"), KeyboardButton(text="–ú–æ–∏ —Å—Ç–∞–≤–∫–∏")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ---
def check_auth(func):
    async def wrapper(message: types.Message, *args, **kwargs):
        if message.from_user.id not in STUB_DATA["sessions"]:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /login!", reply_markup=get_main_menu())
            return
        return await func(message, *args, **kwargs)
    return wrapper

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "üèÉ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RunnerBot!",
        reply_markup=get_main_menu(message.from_user.id)
    )

# --- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ---
@dp.message(Command("login"))
@dp.message(F.text == "üîê –í–æ–π—Ç–∏")
async def start_auth(message: types.Message, state: FSMContext):
    await message.answer("üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(AuthStates.waiting_for_email)

@dp.message(AuthStates.waiting_for_email)
async def process_email(message: types.Message, state: FSMContext):
    email = message.text.lower()
    
    if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
        
    if email not in STUB_DATA["auth_users"]:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=get_main_menu())
        await state.clear()
        return
        
    await state.update_data(email=email)
    await message.answer("üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    await state.set_state(AuthStates.waiting_for_password)

@dp.message(AuthStates.waiting_for_password)
async def process_password(message: types.Message, state: FSMContext):
    data = await state.get_data()
    email = data["email"]
    
    if message.text != STUB_DATA["auth_users"][email]["password"]:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
        
    STUB_DATA["sessions"][message.from_user.id] = email
    await message.answer(
        f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {email}",
        reply_markup=get_main_menu(message.from_user.id)
    )
    await state.clear()

# --- –í—ã—Ö–æ–¥ ---
@dp.message(F.text == "üö™ –í—ã–π—Ç–∏")
async def logout(message: types.Message):
    if message.from_user.id in STUB_DATA["sessions"]:
        del STUB_DATA["sessions"][message.from_user.id]
    await message.answer("‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã", reply_markup=get_main_menu())

# --- –ö–æ—à–µ–ª—ë–∫ ---
@dp.message(Command("wallet"))
@dp.message(F.text == "üí∞ –ö–æ—à–µ–ª—ë–∫")
@check_auth
async def wallet(message: types.Message, state: FSMContext):
    email = STUB_DATA["sessions"][message.from_user.id]
    balance = STUB_DATA["auth_users"][email]["balance"]
    await message.answer(
        f"üíº –í–∞—à –∫–æ—à–µ–ª—ë–∫\n"
        f"–ë–∞–ª–∞–Ω—Å: {balance} —Ç–æ–∫–µ–Ω–æ–≤\n"
        f"–ò–≥—Ä–æ–≤–æ–π ID: {STUB_DATA['auth_users'][email]['game_id']}",
        reply_markup=get_wallet_menu()
    )
    await state.set_state(MenuStates.in_wallet)

# --- –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ---
@dp.message(F.text == "–ü–æ–ø–æ–ª–Ω–∏—Ç—å")
@check_auth
async def deposit(message: types.Message, state: FSMContext):
    await message.answer("üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(MenuStates.waiting_for_deposit)

@dp.message(MenuStates.waiting_for_deposit)
@check_auth
async def process_deposit(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!", reply_markup=get_wallet_menu())
        return
        
    amount = int(message.text)
    email = STUB_DATA["sessions"][message.from_user.id]
    STUB_DATA["auth_users"][email]["balance"] += amount
    
    await message.answer(
        f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} —Ç–æ–∫–µ–Ω–æ–≤!\n"
        f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {STUB_DATA['auth_users'][email]['balance']}",
        reply_markup=get_main_menu(message.from_user.id)
    )
    await state.clear()

# --- –°—Ç–∞–≤–∫–∏ ---
@dp.message(Command("bets"))
@dp.message(F.text == "üé≤ –°—Ç–∞–≤–∫–∏")
@check_auth
async def bets_menu(message: types.Message, state: FSMContext):
    await message.answer(
        "üé≤ –†–∞–∑–¥–µ–ª —Å—Ç–∞–≤–æ–∫",
        reply_markup=get_bets_menu()
    )
    await state.set_state(MenuStates.in_bets)

@dp.message(F.text == "–°–æ–∑–¥–∞—Ç—å —Å—Ç–∞–≤–∫—É")
@check_auth
async def create_bet(message: types.Message, state: FSMContext):
    email = STUB_DATA["sessions"][message.from_user.id]
    balance = STUB_DATA["auth_users"][email]["balance"]
    await message.answer(
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} —Ç–æ–∫–µ–Ω–æ–≤\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(MenuStates.waiting_for_bet_amount)

@dp.message(MenuStates.waiting_for_bet_amount)
@check_auth
async def process_bet(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!", reply_markup=get_bets_menu())
        return
        
    amount = int(message.text)
    email = STUB_DATA["sessions"][message.from_user.id]
    
    if amount > STUB_DATA["auth_users"][email]["balance"]:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", reply_markup=get_bets_menu())
        return
        
    STUB_DATA["auth_users"][email]["balance"] -= amount
    bet_id = len(STUB_DATA["bets"]) + 1
    STUB_DATA["bets"].append({
        "id": bet_id,
        "game_id": STUB_DATA["auth_users"][email]["game_id"],
        "amount": amount,
        "status": "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"
    })
    
    await message.answer(
        f"‚úÖ –°—Ç–∞–≤–∫–∞ –Ω–∞ {amount} —Ç–æ–∫–µ–Ω–æ–≤ —Å–æ–∑–¥–∞–Ω–∞!\n"
        f"üí∞ –û—Å—Ç–∞—Ç–æ–∫: {STUB_DATA['auth_users'][email]['balance']}",
        reply_markup=get_main_menu(message.from_user.id)
    )
    await state.clear()

# --- –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ ---
@dp.message(Command("leaderboard"))
@dp.message(F.text == "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤")
async def leaderboard(message: types.Message):
    leaderboard_text = "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n"
    for i, player in enumerate(STUB_DATA["leaderboard"], 1):
        leaderboard_text += f"{i}. {player['username']} - {player['score']}\n"
    await message.answer(leaderboard_text)

# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
@dp.message(Command("stats"))
@dp.message(F.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
@check_auth
async def stats(message: types.Message):
    email = STUB_DATA["sessions"][message.from_user.id]
    user_data = STUB_DATA["auth_users"][email]
    bets = [bet for bet in STUB_DATA["bets"] if bet["game_id"] == user_data["game_id"]]
    
    await message.answer(
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –¢–æ–∫–µ–Ω—ã: {user_data['balance']}\n"
        f"‚Ä¢ –†–µ–∫–æ—Ä–¥: {user_data['best_score']} –º\n"
        f"‚Ä¢ –°—Ç–∞–≤–æ–∫: {len(bets)}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞–≤–∫–∏: {len([b for b in bets if b['status'] == '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'])}",
        reply_markup=get_main_menu(message.from_user.id)
    )

# --- –ù–∞–∑–∞–¥ ---
@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu(message.from_user.id))

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())